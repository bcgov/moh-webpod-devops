  resource "aws_security_group" "efs_security_group" {
    name        = "efs_security_group"
    description = "Enable EFS access via port 2049"
    vpc_id      = var.vpc_id

    ingress {
      from_port   = 2049
      to_port     = 2049
      protocol    = "tcp"
      cidr_blocks = [var.vpc_cidr]
      description = "For enabling EFS access"
    }

    egress {
      from_port   = 2049
      to_port     = 2049
      protocol    = "tcp"
      cidr_blocks = [var.vpc_cidr]
      description = "For enabling EFS access"
    }
  }

  resource "aws_efs_file_system" "efs" {
    encrypted = true
    performance_mode = var.performance_mode
    throughput_mode = var.throughput_mode

    provisioned_throughput_in_mibps = var.is_provisioned ? var.efs_provisioned_throughput_in_mibps : null

    tags = {
      Name = var.cluster_name
    }

    lifecycle_policy {
      transition_to_ia = "AFTER_30_DAYS"
    }

    file_system_policy = jsonencode({
      Version = "2012-10-17"
      Statement = [
        {
          Effect = "Allow"
          Action = [
            "elasticfilesystem:ClientMount",
            "elasticfilesystem:ClientRootAccess",
            "elasticfilesystem:ClientWrite"
          ]
          Principal = {
            AWS = aws_iam_role.ecs_task_role.arn
          }
        }
      ]
    })
  }

  resource "aws_efs_mount_target" "private_subnet1" {
    file_system_id  = aws_efs_file_system.efs.id
    subnet_id       = var.private_subnet1
    security_groups = [aws_security_group.efs_security_group.id]
  }

  resource "aws_efs_mount_target" "private_subnet2" {
    file_system_id  = aws_efs_file_system.efs.id
    subnet_id       = var.private_subnet2
    security_groups = [aws_security_group.efs_security_group.id]
  }

  resource "aws_efs_mount_target" "private_subnet3" {
    file_system_id  = aws_efs_file_system.efs.id
    subnet_id       = var.private_subnet3
    security_groups = [aws_security_group.efs_security_group.id]
  }

  resource "aws_efs_access_point" "sites" {
    file_system_id = aws_efs_file_system.efs.id

    posix_user {
      uid = 33
      gid = 33
    }

    root_directory {
      path = "/sites"
      creation_info {
        owner_uid = 33
        owner_gid = 33
        permissions = "0755"
      }
    }

    tags = {
      Name = "sites"
    }
  }

  resource "aws_efs_access_point" "modules" {
    file_system_id = aws_efs_file_system.efs.id

    posix_user {
      uid = 33
      gid = 33
    }

    root_directory {
      path = "/modules"
      creation_info {
        owner_uid = 33
        owner_gid = 33
        permissions = "0755"
      }
    }

    tags = {
      Name = "modules"
    }
  }

  resource "aws_efs_access_point" "themes" {
    file_system_id = aws_efs_file_system.efs.id

    posix_user {
      uid = 33
      gid = 33
    }

    root_directory {
      path = "/themes"
      creation_info {
        owner_uid = 33
        owner_gid = 33
        permissions = "0755"
      }
    }

    tags = {
      Name = "themes"
    }
  }

  resource "aws_efs_access_point" "profiles" {
    file_system_id = aws_efs_file_system.efs.id

    posix_user {
      uid = 33
      gid = 33
    }

    root_directory {
      path = "/profiles"
      creation_info {
        owner_uid = 33
        owner_gid = 33
        permissions = "0755"
      }
    }

    tags = {
      Name = "profiles"
    }
  resource "aws_security_group" "efs_security_group" {
    name        = "efs_security_group"
    description = "Enable EFS access via port 2049"
    vpc_id      = var.vpc_id

    ingress {
      from_port   = 2049
      to_port     = 2049
      protocol    = "tcp"
      cidr_blocks = [var.vpc_cidr]
      description = "For enabling EFS access"
    }

    egress {
      from_port   = 2049
      to_port     = 2049
      protocol    = "tcp"
      cidr_blocks = [var.vpc_cidr]
      description = "For enabling EFS access"
    }
  }

  resource "aws_efs_file_system" "efs" {
    encrypted = true
    performance_mode = var.performance_mode
    throughput_mode = var.throughput_mode

    provisioned_throughput_in_mibps = var.is_provisioned ? var.efs_provisioned_throughput_in_mibps : null

    tags = {
      Name = var.cluster_name
    }

    lifecycle_policy {
      transition_to_ia = "AFTER_30_DAYS"
    }

    file_system_policy = jsonencode({
      Version = "2012-10-17"
      Statement = [
        {
          Effect = "Allow"
          Action = [
            "elasticfilesystem:ClientMount",
            "elasticfilesystem:ClientRootAccess",
            "elasticfilesystem:ClientWrite"
          ]
          Principal = {
            AWS = aws_iam_role.ecs_task_role.arn
          }
        }
      ]
    })
  }

  resource "aws_efs_mount_target" "private_subnet1" {
    file_system_id  = aws_efs_file_system.efs.id
    subnet_id       = var.private_subnet1
    security_groups = [aws_security_group.efs_security_group.id]
  }

  resource "aws_efs_mount_target" "private_subnet2" {
    file_system_id  = aws_efs_file_system.efs.id
    subnet_id       = var.private_subnet2
    security_groups = [aws_security_group.efs_security_group.id]
  }

  resource "aws_efs_mount_target" "private_subnet3" {
    file_system_id  = aws_efs_file_system.efs.id
    subnet_id       = var.private_subnet3
    security_groups = [aws_security_group.efs_security_group.id]
  }

  resource "aws_efs_access_point" "sites" {
    file_system_id = aws_efs_file_system.efs.id

    posix_user {
      uid = 33
      gid = 33
    }

    root_directory {
      path = "/sites"
      creation_info {
        owner_uid = 33
        owner_gid = 33
        permissions = "0755"
      }
    }

    tags = {
      Name = "sites"
    }
  }

  resource "aws_efs_access_point" "modules" {
    file_system_id = aws_efs_file_system.efs.id

    posix_user {
      uid = 33
      gid = 33
    }

    root_directory {
      path = "/modules"
      creation_info {
        owner_uid = 33
        owner_gid = 33
        permissions = "0755"
      }
    }

    tags = {
      Name = "modules"
    }
  }

  resource "aws_efs_access_point" "themes" {
    file_system_id = aws_efs_file_system.efs.id

    posix_user {
      uid = 33
      gid = 33
    }

    root_directory {
      path = "/themes"
      creation_info {
        owner_uid = 33
        owner_gid = 33
        permissions = "0755"
      }
    }

    tags = {
      Name = "themes"
    }
  }

  resource "aws_efs_access_point" "profiles" {
    file_system_id = aws_efs_file_system.efs.id

    posix_user {
      uid = 33
      gid = 33
    }

    root_directory {
      path = "/profiles"
      creation_info {
        owner_uid = 33
        owner_gid = 33
        permissions = "0755"
      }
    }

    tags = {
      Name = "profiles"
    }
  }
    resource "aws_security_group" "efs_security_group" {
      name        = "efs_security_group"
      description = "Enable EFS access via port 2049"
      vpc_id      = var.vpc_id

      ingress {
        from_port   = 2049
        to_port     = 2049
        protocol    = "tcp"
        cidr_blocks = [var.vpc_cidr]
        description = "For enabling EFS access"
      }

      egress {
        from_port   = 2049
        to_port     = 2049
        protocol    = "tcp"
        cidr_blocks = [var.vpc_cidr]
        description = "For enabling EFS access"
      }
    }

    resource "aws_efs_file_system" "efs" {
      encrypted = true
      performance_mode = var.performance_mode
      throughput_mode = var.throughput_mode

      provisioned_throughput_in_mibps = var.is_provisioned ? var.efs_provisioned_throughput_in_mibps : null

      tags = {
        Name = var.cluster_name
      }

      lifecycle_policy {
        transition_to_ia = "AFTER_30_DAYS"
      }

      file_system_policy = jsonencode({
        Version = "2012-10-17"
        Statement = [
          {
            Effect = "Allow"
            Action = [
              "elasticfilesystem:ClientMount",
              "elasticfilesystem:ClientRootAccess",
              "elasticfilesystem:ClientWrite"
            ]
            Principal = {
              AWS = aws_iam_role.ecs_task_role.arn
            }
          }
        ]
      })
    }

    resource "aws_efs_mount_target" "private_subnet1" {
      file_system_id  = aws_efs_file_system.efs.id
      subnet_id       = var.private_subnet1
      security_groups = [aws_security_group.efs_security_group.id]
    }

    resource "aws_efs_mount_target" "private_subnet2" {
      file_system_id  = aws_efs_file_system.efs.id
      subnet_id       = var.private_subnet2
      security_groups = [aws_security_group.efs_security_group.id]
    }

    resource "aws_efs_mount_target" "private_subnet3" {
      file_system_id  = aws_efs_file_system.efs.id
      subnet_id       = var.private_subnet3
      security_groups = [aws_security_group.efs_security_group.id]
    }

    resource "aws_efs_access_point" "sites" {
      file_system_id = aws_efs_file_system.efs.id

      posix_user {
        uid = 33
        gid = 33
      }

      root_directory {
        path = "/sites"
        creation_info {
          owner_uid = 33
          owner_gid = 33
          permissions = "0755"
        }
      }

      tags = {
        Name = "sites"
      }
    }

    resource "aws_efs_access_point" "modules" {
      file_system_id = aws_efs_file_system.efs.id

      posix_user {
        uid = 33
        gid = 33
      }

      root_directory {
        path = "/modules"
        creation_info {
          owner_uid = 33
          owner_gid = 33
          permissions = "0755"
        }
      }

      tags = {
        Name = "modules"
      }
    }

    resource "aws_efs_access_point" "themes" {
      file_system_id = aws_efs_file_system.efs.id

      posix_user {
        uid = 33
        gid = 33
      }

      root_directory {
        path = "/themes"
        creation_info {
          owner_uid = 33
          owner_gid = 33
          permissions = "0755"
        }
      }

      tags = {
        Name = "themes"
      }
    }

    resource "aws_efs_access_point" "profiles" {
      file_system_id = aws_efs_file_system.efs.id

      posix_user {
        uid = 33
        gid = 33
      }

      root_directory {
        path = "/profiles"
        creation_info {
          owner_uid = 33
          owner_gid = 33
          permissions = "0755"
        }
      }

      tags = {
        Name = "profiles"
      }
    }